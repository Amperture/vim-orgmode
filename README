This is a mirror of http://www.vim.org/scripts/script.php?script_id=3642

DESCRIPTION						       *org-description*

Text outlining and task management for Vim based on Emacs' Org-Mode.

The idea for this plugin was born by listening to the Floss Weekly podcast
introducing Emacs Org-Mode (http://twit.tv/floss136). Org-Mode has a lot of
strong features like folding, views (sparse tree) and scheduling of tasks.
These are completed by hyperlinks, tags, todo states, priorities aso.

Vim-orgmode aims at providing the same functionality for Vim and for command
line tools*.

* for command line tools and other programs a library liborgmode is provided.
  It encapsulates all functionality for parsing and modifying Org-Mode files.

USAGE								     *org-usage*

  vim-orgmode aims to be clone of the original orgmode for Emacs. Since Emacs
  is not vim the clone is not aiming for 100% compatibility.  Especially in
  terms of the keybindings there will be major differences!

  You'll definitively enjoy the modal interface, this where vim's strength is.
  Almost all keybindings for orgmode work only in normal and visual mode where
  as in insert mode just a few are available.

  Start of with vim-orgmode by open a file with the extension .org. An
  additional menu "Org" is shown that gives an overview of the implemented
  functionality and the keybindings.

Text objects~
   Vim offers a mighty feature called text-objects. A text-object is bound to
   a certain character sequence that can be used in combination with all kinds
   of editing and selection tasks. vim-orgmode offers the following
   text-objects:

   ih - inner heading, referring to the current heading excluding the heading
        level characters (*)
   ah - a heading, referring to the current heading including everything
   it - inner subtree, starting with the current heading
   at - a subtree, starting with the current heading
   Oh - inner outer heading, referring to the parent
   Ot - inner outer heading, including subtree, referring to the parent
   OH - a outer heading
   OT - a outer subtree

   Movement commands can also be used for editing like text-objects:

   g{ - execute command from current position to the beginning of the parent
        heading
   g} - execute command from current position to the beginning of the parent's
        next sibling
   {  - execute command from current position to the beginning of the current
        heading
   }  - execute command from current position to the end of the current
        heading
   [[ - execute command from current position to the beginning of the previous
        heading sibling
   ]] - execute command from current position to the end of the next heading
        sibling

   For further information please read :h text-objects-changed

Suggested plugins~
  - pathogen (vimscript#2332)
    easy management of multiple vim plugins

  - repeat (vimscript#2136)
    repeat actions that would not be repeatable otherwise

  - taglist ([vimscript#273)
    display tags for the currently edited file

  - tagbar (vimscript#3465)
    a new approach to displaying tags for the currently edited file

  - speeddating (vimscript#2120)
    in-/decrease dates the vim way: C-a and C-x

  - Narrow Region (vimscript#3075)
    emulation of Emacs' Narrow Region feature

  - Universal Text Linking
    (vimscript#293) general support for
    text linking, the Hyperlinks feature of vim-orgmode depends on this plugin

==============================================================================
CUSTOMIZATION						     *org-customization*

Remapping shortcuts~
  vim-orgmode provides an easy way for remapping the default keyboard
  shortcuts. For this task it relies on vim's <Plug> mappings. All shortcuts
  of vim-orgmode are accessible by <Plug>s.

  To change a keyboard shortcut the name of the related <Plug> is needed.
  First we need to look up the current mapping in the Org menu. The following
  command reveals the <Plug>'s name:
>
  :map <current_mapping>
<

  The result should look something like this:
>
  :map ,t
  n ,t @<Plug>OrgSetTags
<

  Now we can create an alternate mapping:
>
  nmap <new_mapping> <the_plug>
<

  To change the mapping for editing tags to <leader>t the vimrc entrie would
  look like this:
>
  nmap <leader>t @<Plug>OrgSetTags
<

Syntax highlighting~
Syntax highlighting is customizable to fit nicely with the user's colorscheme.

					        *g:org_heading_highlight_colors*
Define the highlighting colors/group names for headings (default):
>
    let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier',
    \		'Statement', 'PreProc', 'Type', 'Special']
<

					        *g:org_heading_highlight_levels*
Definie the number of levels of highlighting. If this number is bigger than
the list of colors defined in of g:org_heading_highlight_colors the colors of
g:org_heading_highlight_colors get repeated (default):
>
    let g:org_heading_highlight_levels = len(g:org_heading_highlight_colors)
<

					     *g:org_heading_shade_leading_stars*
Defines if leading stars are displayed in the color of the heading or if a
special NonText highlighting is used that hides them from user (default):
>
    let g:org_heading_shade_leading_stars = 1
<

				    			   *g:org_todo_keywords*
Defines the keywords that are highlighted in headings. For more information
about this variable, please consult the org-mode documentation
(http://orgmode.org/org.html#index-org_002dtodo_002dkeywords-511) (default):
>
    let g:org_todo_keywords = ['TODO', '|', 'DONE']
<

				    		      *g:org_todo_keyword_faces*
Defines special faces (styles) for displaying g:org_todo_keywords. Please
refer to vim documentation (topic |attr-list|) for allowed values for
:weight, :slant, :decoration. Muliple colors can be separated by comma for
:foreground and :background faces to provide different colors for gui and
terminal mode (default):
>
    let g:org_todo_keyword_faces = []
<

Syntax Highlighting Examples~
Define an additionaly keyword 'WAITING' and set the foreground color to
'cyan'. Define another keyword 'CANCELED' and set the foreground color to
red, background to black and the weight to normal, slant to italc and
decoration to underline:

>
    let g:org_todo_keywords = [['TODO', 'WAITING', '|', 'DONE'],
    \		['|', 'CANCELED']]
    let g:org_todo_keyword_faces = [['WAITING', 'cyan'], ['CANCELED',
    \		[':foreground red', ':background black', ':weight bold',
    \		':slant italic', ':decoration underline']]]
<
